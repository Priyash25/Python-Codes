# https://leetcode.com/problems/candy-crush/



'''
INPUT :-

[[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314]
,[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,2,713,714],[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]]

'''

class Solution:
    def candyCrush(self, board: List[List[int]]) -> List[List[int]]:
        
        def search_row(self,rows,columns,board):
            # Search in The Row For Similar Elements and Add It to a Set
            ans=set([])

            for i in range(rows):
                for elem_index in range(0,columns-2):
                    if board[i][elem_index]==board[i][elem_index+1]==board[i][elem_index+2] and board[i][elem_index]!=0 :
                        ans=ans | set([(i,elem_index),(i,elem_index+1),(i,elem_index+2)])              
            return ans
    
        def search_column(self,row,cols,board):
            # Search in The Column For Similar Elements and Add It to a Set
            ans1=set([])

            for i in range(row):
                for j in range(cols):
                    if board[i][j]==board[i+1][j]==board[i+2][j] and board[i][j]!=0:
                        ans1=ans1 | set([(i,j),(i+1,j),(i+2,j)])           
            return ans1


        def crush_elements(self,indices,board):
            # Crush Elements By Making Them 0

            for index in indices:
                board[index[0]][index[1]]=0

            board=shift_elements(self,board,len(board),len(board[0])) # You Need to Shift the Elements Too

            return board

        def shift_elements(self,board,rows,columns):

            # Strategy Is to Move From Bottom To Top and Use 2 variables in such a way that you can swicth elements if j is 0
            
            for i in range(columns):

                m=rows-1
                j=rows-1

                while m>=0:
                    if board[j][i]==0:
                        if board[m][i]==0:
                            m-=1
                        else:
                            board[j][i]=board[m][i]
                            board[m][i]=0
                            m-=1
                            j-=1
                    else:
                        m-=1
                        j-=1

            return board
    
        rows=len(board)
        columns=len(board[0])

        elem_left=True

        while elem_left:
        
            #Strategy is To Seach for Similar Items until we dont find one.

            row_duplicates=search_row(self,rows,columns,board)
            col_duplicates=search_column(self,rows-2,columns,board)

            if len(row_duplicates)!=0  or len(col_duplicates)!=0:
                board=crush_elements(self,row_duplicates|col_duplicates,board)
            else:
                board=crush_elements(self,row_duplicates|col_duplicates,board)
                elem_left=False  
                return board
            
   

    

            
   

    
